{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React\\\\onwards-to-a-bigger-project-NextJS\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/meetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    adress: props.meetupData.adress,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://amel123:123@cluster0.cnozerd.mongodb.net/?retryWrites=true&w=majority\");\n  const database = client.db();\n  const meetupsCollection = database.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  /*  console.log(meetups) */\n\n  const justIds = meetups.map(meetup => meetup._id.toString());\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://amel123:123@cluster0.cnozerd.mongodb.net/?retryWrites=true&w=majority\");\n  const database = client.db();\n  const meetupsCollection = database.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/User/Desktop/React/onwards-to-a-bigger-project-NextJS/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","meetupData","image","title","adress","description","getStaticPaths","client","connect","database","db","meetupsCollection","collection","meetups","find","toArray","justIds","map","meetup","_id","toString","close","fallback","paths","params","meetupId","getStaticProps","context","selectedMeetup","findOne"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAGF,KAAK,CAACC,UAAN,CAAiBE,KAF3B;AAGE,IAAA,MAAM,EAAEH,KAAK,CAACC,UAAN,CAAiBG,MAH3B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,qFADmB,CAArB;AAGA,QAAMC,QAAQ,GAAGF,MAAM,CAACG,EAAP,EAAjB;AAEA,QAAMC,iBAAiB,GAAGF,QAAQ,CAACG,UAAT,CAAoB,SAApB,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,GAAyBC,OAAzB,EAAtB;AACA;;AACA,QAAMC,OAAO,GAAGH,OAAO,CAACI,GAAR,CAAYC,MAAM,IAAIA,MAAM,CAACC,GAAP,CAAWC,QAAX,EAAtB,CAAhB;AACDb,EAAAA,MAAM,CAACc,KAAP;AAEC,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEV,OAAO,CAACI,GAAR,CAAYC,MAAM,KAAK;AAACM,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEP,MAAM,CAACC,GAAP,CAAWC,QAAX;AAAX;AAAT,KAAL,CAAlB;AAFF,GAAP;AAID;AAED,OAAO,eAAeM,cAAf,CAA8BC,OAA9B,EAAuC;AAE1C,QAAMF,QAAQ,GAAGE,OAAO,CAACH,MAAR,CAAeC,QAAhC;AAEA,QAAMlB,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACjB,qFADiB,CAArB;AAGE,QAAMC,QAAQ,GAAGF,MAAM,CAACG,EAAP,EAAjB;AACA,QAAMC,iBAAiB,GAAGF,QAAQ,CAACG,UAAT,CAAoB,SAApB,CAA1B;AAEA,QAAMgB,cAAc,GAAG,MAAMjB,iBAAiB,CAACkB,OAAlB,CAA0B;AAACV,IAAAA,GAAG,EAAErB,QAAQ,CAAC2B,QAAD;AAAd,GAA1B,CAA7B;AAEAlB,EAAAA,MAAM,CAACc,KAAP;AAGJ,SAAO;AACLrB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE2B;AADP;AADF,GAAP;AAKD;AAED,eAAe7B,aAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport MeetupDetail from \"../../components/meetups/meetupDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nfunction MeetupDetails(props) {\r\n  return (\r\n    <MeetupDetail\r\n      image={props.meetupData.image}\r\n      title= {props.meetupData.title}\r\n      adress={props.meetupData.adress}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://amel123:123@cluster0.cnozerd.mongodb.net/?retryWrites=true&w=majority\"\r\n  );\r\n  const database = client.db();\r\n\r\n  const meetupsCollection = database.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find().toArray();\r\n  /*  console.log(meetups) */\r\n  const justIds = meetups.map(meetup => meetup._id.toString())\r\n client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map(meetup => ({params: {meetupId: meetup._id.toString()}})),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  \r\n    const meetupId = context.params.meetupId;\r\n\r\n    const client = await MongoClient.connect(\r\n        \"mongodb+srv://amel123:123@cluster0.cnozerd.mongodb.net/?retryWrites=true&w=majority\"\r\n      );\r\n      const database = client.db();\r\n      const meetupsCollection = database.collection(\"meetups\");\r\n\r\n      const selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupId)})\r\n\r\n      client.close();\r\n  \r\n    \r\n  return {\r\n    props: {\r\n      meetupData: selectedMeetup,\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}